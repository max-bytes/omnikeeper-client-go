/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// GraphvizDotApiService GraphvizDotApi service
type GraphvizDotApiService service

type ApiGraphvizDotLayerCentricRequest struct {
	ctx context.Context
	ApiService *GraphvizDotApiService
	layerIDs *[]string
	from *time.Time
	to *time.Time
	version string
}

func (r ApiGraphvizDotLayerCentricRequest) LayerIDs(layerIDs []string) ApiGraphvizDotLayerCentricRequest {
	r.layerIDs = &layerIDs
	return r
}

func (r ApiGraphvizDotLayerCentricRequest) From(from time.Time) ApiGraphvizDotLayerCentricRequest {
	r.from = &from
	return r
}

func (r ApiGraphvizDotLayerCentricRequest) To(to time.Time) ApiGraphvizDotLayerCentricRequest {
	r.to = &to
	return r
}

func (r ApiGraphvizDotLayerCentricRequest) Execute() (*http.Response, error) {
	return r.ApiService.GraphvizDotLayerCentricExecute(r)
}

/*
GraphvizDotLayerCentric Method for GraphvizDotLayerCentric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @return ApiGraphvizDotLayerCentricRequest
*/
func (a *GraphvizDotApiService) GraphvizDotLayerCentric(ctx context.Context, version string) ApiGraphvizDotLayerCentricRequest {
	return ApiGraphvizDotLayerCentricRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
	}
}

// Execute executes the request
func (a *GraphvizDotApiService) GraphvizDotLayerCentricExecute(r ApiGraphvizDotLayerCentricRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraphvizDotApiService.GraphvizDotLayerCentric")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{version}/GraphvizDot/layerCentric"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.layerIDs == nil {
		return nil, reportError("layerIDs is required and must be specified")
	}
	if r.from == nil {
		return nil, reportError("from is required and must be specified")
	}
	if r.to == nil {
		return nil, reportError("to is required and must be specified")
	}

	{
		t := *r.layerIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "layerIDs", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "layerIDs", t, "multi")
		}
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "from", r.from, "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "to", r.to, "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGraphvizDotTraitCentricRequest struct {
	ctx context.Context
	ApiService *GraphvizDotApiService
	layerIDs *[]string
	version string
	traitIDs *[]string
	traitIDsRegex *string
}

func (r ApiGraphvizDotTraitCentricRequest) LayerIDs(layerIDs []string) ApiGraphvizDotTraitCentricRequest {
	r.layerIDs = &layerIDs
	return r
}

func (r ApiGraphvizDotTraitCentricRequest) TraitIDs(traitIDs []string) ApiGraphvizDotTraitCentricRequest {
	r.traitIDs = &traitIDs
	return r
}

func (r ApiGraphvizDotTraitCentricRequest) TraitIDsRegex(traitIDsRegex string) ApiGraphvizDotTraitCentricRequest {
	r.traitIDsRegex = &traitIDsRegex
	return r
}

func (r ApiGraphvizDotTraitCentricRequest) Execute() (*http.Response, error) {
	return r.ApiService.GraphvizDotTraitCentricExecute(r)
}

/*
GraphvizDotTraitCentric Method for GraphvizDotTraitCentric

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @return ApiGraphvizDotTraitCentricRequest
*/
func (a *GraphvizDotApiService) GraphvizDotTraitCentric(ctx context.Context, version string) ApiGraphvizDotTraitCentricRequest {
	return ApiGraphvizDotTraitCentricRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
	}
}

// Execute executes the request
func (a *GraphvizDotApiService) GraphvizDotTraitCentricExecute(r ApiGraphvizDotTraitCentricRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GraphvizDotApiService.GraphvizDotTraitCentric")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{version}/GraphvizDot/traitCentric"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterValueToString(r.version, "version")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.layerIDs == nil {
		return nil, reportError("layerIDs is required and must be specified")
	}

	{
		t := *r.layerIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "layerIDs", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "layerIDs", t, "multi")
		}
	}
	if r.traitIDs != nil {
		t := *r.traitIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "traitIDs", s.Index(i), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "traitIDs", t, "multi")
		}
	}
	if r.traitIDsRegex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "traitIDsRegex", r.traitIDsRegex, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
