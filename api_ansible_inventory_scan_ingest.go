/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// AnsibleInventoryScanIngestApiService AnsibleInventoryScanIngestApi service
type AnsibleInventoryScanIngestApiService service

type ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest struct {
	ctx context.Context
	ApiService *AnsibleInventoryScanIngestApiService
	writeLayerID *string
	searchLayerIDs *[]string
	version string
	ansibleInventoryScanDTO *AnsibleInventoryScanDTO
}

func (r ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest) WriteLayerID(writeLayerID string) ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest {
	r.writeLayerID = &writeLayerID
	return r
}

func (r ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest) SearchLayerIDs(searchLayerIDs []string) ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest {
	r.searchLayerIDs = &searchLayerIDs
	return r
}

func (r ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest) AnsibleInventoryScanDTO(ansibleInventoryScanDTO AnsibleInventoryScanDTO) ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest {
	r.ansibleInventoryScanDTO = &ansibleInventoryScanDTO
	return r
}

func (r ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest) Execute() (*http.Response, error) {
	return r.ApiService.AnsibleInventoryScanIngestIngestAnsibleInventoryScanExecute(r)
}

/*
AnsibleInventoryScanIngestIngestAnsibleInventoryScan Method for AnsibleInventoryScanIngestIngestAnsibleInventoryScan

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @return ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest
*/
func (a *AnsibleInventoryScanIngestApiService) AnsibleInventoryScanIngestIngestAnsibleInventoryScan(ctx context.Context, version string) ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest {
	return ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
	}
}

// Execute executes the request
func (a *AnsibleInventoryScanIngestApiService) AnsibleInventoryScanIngestIngestAnsibleInventoryScanExecute(r ApiAnsibleInventoryScanIngestIngestAnsibleInventoryScanRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnsibleInventoryScanIngestApiService.AnsibleInventoryScanIngestIngestAnsibleInventoryScan")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{version}/Ingest/AnsibleInventoryScan"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writeLayerID == nil {
		return nil, reportError("writeLayerID is required and must be specified")
	}
	if r.searchLayerIDs == nil {
		return nil, reportError("searchLayerIDs is required and must be specified")
	}
	if r.ansibleInventoryScanDTO == nil {
		return nil, reportError("ansibleInventoryScanDTO is required and must be specified")
	}

	localVarQueryParams.Add("writeLayerID", parameterToString(*r.writeLayerID, ""))
	{
		t := *r.searchLayerIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("searchLayerIDs", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("searchLayerIDs", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/xml", "text/plain", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleInventoryScanDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
