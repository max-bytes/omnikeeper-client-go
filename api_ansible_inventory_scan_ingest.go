/*
 * Landscape omnikeeper REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// AnsibleInventoryScanIngestApiService AnsibleInventoryScanIngestApi service
type AnsibleInventoryScanIngestApiService service

type ApiIngestAnsibleInventoryScanRequest struct {
	ctx _context.Context
	ApiService *AnsibleInventoryScanIngestApiService
	writeLayerID *int64
	searchLayerIDs *[]int64
	version string
	ansibleInventoryScanDTO *AnsibleInventoryScanDTO
}

func (r ApiIngestAnsibleInventoryScanRequest) WriteLayerID(writeLayerID int64) ApiIngestAnsibleInventoryScanRequest {
	r.writeLayerID = &writeLayerID
	return r
}
func (r ApiIngestAnsibleInventoryScanRequest) SearchLayerIDs(searchLayerIDs []int64) ApiIngestAnsibleInventoryScanRequest {
	r.searchLayerIDs = &searchLayerIDs
	return r
}
func (r ApiIngestAnsibleInventoryScanRequest) AnsibleInventoryScanDTO(ansibleInventoryScanDTO AnsibleInventoryScanDTO) ApiIngestAnsibleInventoryScanRequest {
	r.ansibleInventoryScanDTO = &ansibleInventoryScanDTO
	return r
}

func (r ApiIngestAnsibleInventoryScanRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IngestAnsibleInventoryScanExecute(r)
}

/*
 * IngestAnsibleInventoryScan Method for IngestAnsibleInventoryScan
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param version
 * @return ApiIngestAnsibleInventoryScanRequest
 */
func (a *AnsibleInventoryScanIngestApiService) IngestAnsibleInventoryScan(ctx _context.Context, version string) ApiIngestAnsibleInventoryScanRequest {
	return ApiIngestAnsibleInventoryScanRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
	}
}

/*
 * Execute executes the request
 */
func (a *AnsibleInventoryScanIngestApiService) IngestAnsibleInventoryScanExecute(r ApiIngestAnsibleInventoryScanRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnsibleInventoryScanIngestApiService.IngestAnsibleInventoryScan")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{version}/Ingest/AnsibleInventoryScan"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", _neturl.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.writeLayerID == nil {
		return nil, reportError("writeLayerID is required and must be specified")
	}
	if r.searchLayerIDs == nil {
		return nil, reportError("searchLayerIDs is required and must be specified")
	}
	if r.ansibleInventoryScanDTO == nil {
		return nil, reportError("ansibleInventoryScanDTO is required and must be specified")
	}

	localVarQueryParams.Add("writeLayerID", parameterToString(*r.writeLayerID, ""))
	{
		t := *r.searchLayerIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("searchLayerIDs", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("searchLayerIDs", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/odata", "application/json-patch+json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ansibleInventoryScanDTO
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
