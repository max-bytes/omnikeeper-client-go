/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"encoding/json"
)

// CIAttributeDTO struct for CIAttributeDTO
type CIAttributeDTO struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Value AttributeValueDTO `json:"value"`
	Ciid string `json:"ciid"`
	State AttributeState `json:"state"`
}

// NewCIAttributeDTO instantiates a new CIAttributeDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCIAttributeDTO(id string, name string, value AttributeValueDTO, ciid string, state AttributeState) *CIAttributeDTO {
	this := CIAttributeDTO{}
	this.Id = id
	this.Name = name
	this.Value = value
	this.Ciid = ciid
	this.State = state
	return &this
}

// NewCIAttributeDTOWithDefaults instantiates a new CIAttributeDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCIAttributeDTOWithDefaults() *CIAttributeDTO {
	this := CIAttributeDTO{}
	return &this
}

// GetId returns the Id field value
func (o *CIAttributeDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CIAttributeDTO) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CIAttributeDTO) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CIAttributeDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CIAttributeDTO) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CIAttributeDTO) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *CIAttributeDTO) GetValue() AttributeValueDTO {
	if o == nil {
		var ret AttributeValueDTO
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *CIAttributeDTO) GetValueOk() (*AttributeValueDTO, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *CIAttributeDTO) SetValue(v AttributeValueDTO) {
	o.Value = v
}

// GetCiid returns the Ciid field value
func (o *CIAttributeDTO) GetCiid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ciid
}

// GetCiidOk returns a tuple with the Ciid field value
// and a boolean to check if the value has been set.
func (o *CIAttributeDTO) GetCiidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Ciid, true
}

// SetCiid sets field value
func (o *CIAttributeDTO) SetCiid(v string) {
	o.Ciid = v
}

// GetState returns the State field value
func (o *CIAttributeDTO) GetState() AttributeState {
	if o == nil {
		var ret AttributeState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CIAttributeDTO) GetStateOk() (*AttributeState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CIAttributeDTO) SetState(v AttributeState) {
	o.State = v
}

func (o CIAttributeDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["ciid"] = o.Ciid
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableCIAttributeDTO struct {
	value *CIAttributeDTO
	isSet bool
}

func (v NullableCIAttributeDTO) Get() *CIAttributeDTO {
	return v.value
}

func (v *NullableCIAttributeDTO) Set(val *CIAttributeDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCIAttributeDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCIAttributeDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCIAttributeDTO(val *CIAttributeDTO) *NullableCIAttributeDTO {
	return &NullableCIAttributeDTO{value: val, isSet: true}
}

func (v NullableCIAttributeDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCIAttributeDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


