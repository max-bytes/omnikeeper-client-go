/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"encoding/json"
)

// RelationDTO struct for RelationDTO
type RelationDTO struct {
	Id string `json:"id"`
	FromCIID string `json:"fromCIID"`
	ToCIID string `json:"toCIID"`
	PredicateID string `json:"predicateID"`
	State RelationState `json:"state"`
}

// NewRelationDTO instantiates a new RelationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationDTO(id string, fromCIID string, toCIID string, predicateID string, state RelationState) *RelationDTO {
	this := RelationDTO{}
	this.Id = id
	this.FromCIID = fromCIID
	this.ToCIID = toCIID
	this.PredicateID = predicateID
	this.State = state
	return &this
}

// NewRelationDTOWithDefaults instantiates a new RelationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationDTOWithDefaults() *RelationDTO {
	this := RelationDTO{}
	return &this
}

// GetId returns the Id field value
func (o *RelationDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelationDTO) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelationDTO) SetId(v string) {
	o.Id = v
}

// GetFromCIID returns the FromCIID field value
func (o *RelationDTO) GetFromCIID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromCIID
}

// GetFromCIIDOk returns a tuple with the FromCIID field value
// and a boolean to check if the value has been set.
func (o *RelationDTO) GetFromCIIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FromCIID, true
}

// SetFromCIID sets field value
func (o *RelationDTO) SetFromCIID(v string) {
	o.FromCIID = v
}

// GetToCIID returns the ToCIID field value
func (o *RelationDTO) GetToCIID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToCIID
}

// GetToCIIDOk returns a tuple with the ToCIID field value
// and a boolean to check if the value has been set.
func (o *RelationDTO) GetToCIIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ToCIID, true
}

// SetToCIID sets field value
func (o *RelationDTO) SetToCIID(v string) {
	o.ToCIID = v
}

// GetPredicateID returns the PredicateID field value
func (o *RelationDTO) GetPredicateID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PredicateID
}

// GetPredicateIDOk returns a tuple with the PredicateID field value
// and a boolean to check if the value has been set.
func (o *RelationDTO) GetPredicateIDOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PredicateID, true
}

// SetPredicateID sets field value
func (o *RelationDTO) SetPredicateID(v string) {
	o.PredicateID = v
}

// GetState returns the State field value
func (o *RelationDTO) GetState() RelationState {
	if o == nil {
		var ret RelationState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RelationDTO) GetStateOk() (*RelationState, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RelationDTO) SetState(v RelationState) {
	o.State = v
}

func (o RelationDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["fromCIID"] = o.FromCIID
	}
	if true {
		toSerialize["toCIID"] = o.ToCIID
	}
	if true {
		toSerialize["predicateID"] = o.PredicateID
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableRelationDTO struct {
	value *RelationDTO
	isSet bool
}

func (v NullableRelationDTO) Get() *RelationDTO {
	return v.value
}

func (v *NullableRelationDTO) Set(val *RelationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationDTO(val *RelationDTO) *NullableRelationDTO {
	return &NullableRelationDTO{value: val, isSet: true}
}

func (v NullableRelationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


