/*
Landscape omnikeeper REST API

Testing GridViewApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package okclient

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_okclient_GridViewApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test GridViewApiService GridViewAddContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewAddContext(context.Background(), version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewChangeData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var context string
        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewChangeData(context.Background(), context, version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewDeleteContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string
        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewDeleteContext(context.Background(), name, version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewEditContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string
        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewEditContext(context.Background(), name, version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewGetData", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var context string
        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewGetData(context.Background(), context, version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewGetGridViewContext", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var name string
        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewGetGridViewContext(context.Background(), name, version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewGetGridViewContexts", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewGetGridViewContexts(context.Background(), version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test GridViewApiService GridViewGetSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var context string
        var version string

        resp, httpRes, err := apiClient.GridViewApi.GridViewGetSchema(context.Background(), context, version).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
