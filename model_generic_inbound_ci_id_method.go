/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"encoding/json"
	"fmt"
)

// GenericInboundCIIdMethod - struct for GenericInboundCIIdMethod
type GenericInboundCIIdMethod struct {
	InboundIDMethodByAttribute *InboundIDMethodByAttribute
	InboundIDMethodByAttributeModifiers *InboundIDMethodByAttributeModifiers
	InboundIDMethodByByUnion *InboundIDMethodByByUnion
	InboundIDMethodByData *InboundIDMethodByData
	InboundIDMethodByIntersect *InboundIDMethodByIntersect
	InboundIDMethodByRelatedTempID *InboundIDMethodByRelatedTempID
	InboundIDMethodByTemporaryCIID *InboundIDMethodByTemporaryCIID
}

// InboundIDMethodByAttributeAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByAttribute wrapped in GenericInboundCIIdMethod
func InboundIDMethodByAttributeAsGenericInboundCIIdMethod(v *InboundIDMethodByAttribute) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByAttribute: v,
	}
}

// InboundIDMethodByAttributeModifiersAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByAttributeModifiers wrapped in GenericInboundCIIdMethod
func InboundIDMethodByAttributeModifiersAsGenericInboundCIIdMethod(v *InboundIDMethodByAttributeModifiers) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByAttributeModifiers: v,
	}
}

// InboundIDMethodByByUnionAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByByUnion wrapped in GenericInboundCIIdMethod
func InboundIDMethodByByUnionAsGenericInboundCIIdMethod(v *InboundIDMethodByByUnion) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByByUnion: v,
	}
}

// InboundIDMethodByDataAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByData wrapped in GenericInboundCIIdMethod
func InboundIDMethodByDataAsGenericInboundCIIdMethod(v *InboundIDMethodByData) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByData: v,
	}
}

// InboundIDMethodByIntersectAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByIntersect wrapped in GenericInboundCIIdMethod
func InboundIDMethodByIntersectAsGenericInboundCIIdMethod(v *InboundIDMethodByIntersect) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByIntersect: v,
	}
}

// InboundIDMethodByRelatedTempIDAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByRelatedTempID wrapped in GenericInboundCIIdMethod
func InboundIDMethodByRelatedTempIDAsGenericInboundCIIdMethod(v *InboundIDMethodByRelatedTempID) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByRelatedTempID: v,
	}
}

// InboundIDMethodByTemporaryCIIDAsGenericInboundCIIdMethod is a convenience function that returns InboundIDMethodByTemporaryCIID wrapped in GenericInboundCIIdMethod
func InboundIDMethodByTemporaryCIIDAsGenericInboundCIIdMethod(v *InboundIDMethodByTemporaryCIID) GenericInboundCIIdMethod {
	return GenericInboundCIIdMethod{
		InboundIDMethodByTemporaryCIID: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GenericInboundCIIdMethod) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InboundIDMethodByAttribute
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByAttribute)
	if err == nil {
		jsonInboundIDMethodByAttribute, _ := json.Marshal(dst.InboundIDMethodByAttribute)
		if string(jsonInboundIDMethodByAttribute) == "{}" { // empty struct
			dst.InboundIDMethodByAttribute = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByAttribute = nil
	}

	// try to unmarshal data into InboundIDMethodByAttributeModifiers
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByAttributeModifiers)
	if err == nil {
		jsonInboundIDMethodByAttributeModifiers, _ := json.Marshal(dst.InboundIDMethodByAttributeModifiers)
		if string(jsonInboundIDMethodByAttributeModifiers) == "{}" { // empty struct
			dst.InboundIDMethodByAttributeModifiers = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByAttributeModifiers = nil
	}

	// try to unmarshal data into InboundIDMethodByByUnion
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByByUnion)
	if err == nil {
		jsonInboundIDMethodByByUnion, _ := json.Marshal(dst.InboundIDMethodByByUnion)
		if string(jsonInboundIDMethodByByUnion) == "{}" { // empty struct
			dst.InboundIDMethodByByUnion = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByByUnion = nil
	}

	// try to unmarshal data into InboundIDMethodByData
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByData)
	if err == nil {
		jsonInboundIDMethodByData, _ := json.Marshal(dst.InboundIDMethodByData)
		if string(jsonInboundIDMethodByData) == "{}" { // empty struct
			dst.InboundIDMethodByData = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByData = nil
	}

	// try to unmarshal data into InboundIDMethodByIntersect
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByIntersect)
	if err == nil {
		jsonInboundIDMethodByIntersect, _ := json.Marshal(dst.InboundIDMethodByIntersect)
		if string(jsonInboundIDMethodByIntersect) == "{}" { // empty struct
			dst.InboundIDMethodByIntersect = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByIntersect = nil
	}

	// try to unmarshal data into InboundIDMethodByRelatedTempID
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByRelatedTempID)
	if err == nil {
		jsonInboundIDMethodByRelatedTempID, _ := json.Marshal(dst.InboundIDMethodByRelatedTempID)
		if string(jsonInboundIDMethodByRelatedTempID) == "{}" { // empty struct
			dst.InboundIDMethodByRelatedTempID = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByRelatedTempID = nil
	}

	// try to unmarshal data into InboundIDMethodByTemporaryCIID
	err = newStrictDecoder(data).Decode(&dst.InboundIDMethodByTemporaryCIID)
	if err == nil {
		jsonInboundIDMethodByTemporaryCIID, _ := json.Marshal(dst.InboundIDMethodByTemporaryCIID)
		if string(jsonInboundIDMethodByTemporaryCIID) == "{}" { // empty struct
			dst.InboundIDMethodByTemporaryCIID = nil
		} else {
			match++
		}
	} else {
		dst.InboundIDMethodByTemporaryCIID = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InboundIDMethodByAttribute = nil
		dst.InboundIDMethodByAttributeModifiers = nil
		dst.InboundIDMethodByByUnion = nil
		dst.InboundIDMethodByData = nil
		dst.InboundIDMethodByIntersect = nil
		dst.InboundIDMethodByRelatedTempID = nil
		dst.InboundIDMethodByTemporaryCIID = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(GenericInboundCIIdMethod)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(GenericInboundCIIdMethod)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GenericInboundCIIdMethod) MarshalJSON() ([]byte, error) {
	if src.InboundIDMethodByAttribute != nil {
		return json.Marshal(&src.InboundIDMethodByAttribute)
	}

	if src.InboundIDMethodByAttributeModifiers != nil {
		return json.Marshal(&src.InboundIDMethodByAttributeModifiers)
	}

	if src.InboundIDMethodByByUnion != nil {
		return json.Marshal(&src.InboundIDMethodByByUnion)
	}

	if src.InboundIDMethodByData != nil {
		return json.Marshal(&src.InboundIDMethodByData)
	}

	if src.InboundIDMethodByIntersect != nil {
		return json.Marshal(&src.InboundIDMethodByIntersect)
	}

	if src.InboundIDMethodByRelatedTempID != nil {
		return json.Marshal(&src.InboundIDMethodByRelatedTempID)
	}

	if src.InboundIDMethodByTemporaryCIID != nil {
		return json.Marshal(&src.InboundIDMethodByTemporaryCIID)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GenericInboundCIIdMethod) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InboundIDMethodByAttribute != nil {
		return obj.InboundIDMethodByAttribute
	}

	if obj.InboundIDMethodByAttributeModifiers != nil {
		return obj.InboundIDMethodByAttributeModifiers
	}

	if obj.InboundIDMethodByByUnion != nil {
		return obj.InboundIDMethodByByUnion
	}

	if obj.InboundIDMethodByData != nil {
		return obj.InboundIDMethodByData
	}

	if obj.InboundIDMethodByIntersect != nil {
		return obj.InboundIDMethodByIntersect
	}

	if obj.InboundIDMethodByRelatedTempID != nil {
		return obj.InboundIDMethodByRelatedTempID
	}

	if obj.InboundIDMethodByTemporaryCIID != nil {
		return obj.InboundIDMethodByTemporaryCIID
	}

	// all schemas are nil
	return nil
}

type NullableGenericInboundCIIdMethod struct {
	value *GenericInboundCIIdMethod
	isSet bool
}

func (v NullableGenericInboundCIIdMethod) Get() *GenericInboundCIIdMethod {
	return v.value
}

func (v *NullableGenericInboundCIIdMethod) Set(val *GenericInboundCIIdMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericInboundCIIdMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericInboundCIIdMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericInboundCIIdMethod(val *GenericInboundCIIdMethod) *NullableGenericInboundCIIdMethod {
	return &NullableGenericInboundCIIdMethod{value: val, isSet: true}
}

func (v NullableGenericInboundCIIdMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericInboundCIIdMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


