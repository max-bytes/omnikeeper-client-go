/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// CISearchApiService CISearchApi service
type CISearchApiService service

type ApiSearchCIsByTraitsRequest struct {
	ctx context.Context
	ApiService *CISearchApiService
	layerIDs *[]string
	withTraits *[]string
	withoutTraits *[]string
	version string
	atTime *time.Time
}

func (r ApiSearchCIsByTraitsRequest) LayerIDs(layerIDs []string) ApiSearchCIsByTraitsRequest {
	r.layerIDs = &layerIDs
	return r
}

func (r ApiSearchCIsByTraitsRequest) WithTraits(withTraits []string) ApiSearchCIsByTraitsRequest {
	r.withTraits = &withTraits
	return r
}

func (r ApiSearchCIsByTraitsRequest) WithoutTraits(withoutTraits []string) ApiSearchCIsByTraitsRequest {
	r.withoutTraits = &withoutTraits
	return r
}

func (r ApiSearchCIsByTraitsRequest) AtTime(atTime time.Time) ApiSearchCIsByTraitsRequest {
	r.atTime = &atTime
	return r
}

func (r ApiSearchCIsByTraitsRequest) Execute() ([]CIDTO, *http.Response, error) {
	return r.ApiService.SearchCIsByTraitsExecute(r)
}

/*
SearchCIsByTraits Method for SearchCIsByTraits

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param version
 @return ApiSearchCIsByTraitsRequest
*/
func (a *CISearchApiService) SearchCIsByTraits(ctx context.Context, version string) ApiSearchCIsByTraitsRequest {
	return ApiSearchCIsByTraitsRequest{
		ApiService: a,
		ctx: ctx,
		version: version,
	}
}

// Execute executes the request
//  @return []CIDTO
func (a *CISearchApiService) SearchCIsByTraitsExecute(r ApiSearchCIsByTraitsRequest) ([]CIDTO, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CIDTO
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CISearchApiService.SearchCIsByTraits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{version}/CISearch/searchCIsByTraits"
	localVarPath = strings.Replace(localVarPath, "{"+"version"+"}", url.PathEscape(parameterToString(r.version, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.layerIDs == nil {
		return localVarReturnValue, nil, reportError("layerIDs is required and must be specified")
	}
	if r.withTraits == nil {
		return localVarReturnValue, nil, reportError("withTraits is required and must be specified")
	}
	if r.withoutTraits == nil {
		return localVarReturnValue, nil, reportError("withoutTraits is required and must be specified")
	}

	{
		t := *r.layerIDs
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("layerIDs", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("layerIDs", parameterToString(t, "multi"))
		}
	}
	{
		t := *r.withTraits
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("withTraits", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("withTraits", parameterToString(t, "multi"))
		}
	}
	{
		t := *r.withoutTraits
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("withoutTraits", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("withoutTraits", parameterToString(t, "multi"))
		}
	}
	if r.atTime != nil {
		localVarQueryParams.Add("atTime", parameterToString(*r.atTime, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json;odata.metadata=minimal;odata.streaming=true", "application/json;odata.metadata=minimal;odata.streaming=false", "application/json;odata.metadata=minimal", "application/json;odata.metadata=full;odata.streaming=true", "application/json;odata.metadata=full;odata.streaming=false", "application/json;odata.metadata=full", "application/json;odata.metadata=none;odata.streaming=true", "application/json;odata.metadata=none;odata.streaming=false", "application/json;odata.metadata=none", "application/json;odata.streaming=true", "application/json;odata.streaming=false", "application/json", "application/xml", "application/odata", "text/plain", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
