/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"encoding/json"
	"fmt"
)

// SameTargetCIHandling the model 'SameTargetCIHandling'
type SameTargetCIHandling string

// List of SameTargetCIHandling
const (
	SAMETARGETCIHANDLING_ERROR SameTargetCIHandling = "Error"
	SAMETARGETCIHANDLING_DROP SameTargetCIHandling = "Drop"
	SAMETARGETCIHANDLING_DROP_AND_WARN SameTargetCIHandling = "DropAndWarn"
	SAMETARGETCIHANDLING_EVADE SameTargetCIHandling = "Evade"
	SAMETARGETCIHANDLING_EVADE_AND_WARN SameTargetCIHandling = "EvadeAndWarn"
	SAMETARGETCIHANDLING_MERGE SameTargetCIHandling = "Merge"
)

// All allowed values of SameTargetCIHandling enum
var AllowedSameTargetCIHandlingEnumValues = []SameTargetCIHandling{
	"Error",
	"Drop",
	"DropAndWarn",
	"Evade",
	"EvadeAndWarn",
	"Merge",
}

func (v *SameTargetCIHandling) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SameTargetCIHandling(value)
	for _, existing := range AllowedSameTargetCIHandlingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SameTargetCIHandling", value)
}

// NewSameTargetCIHandlingFromValue returns a pointer to a valid SameTargetCIHandling
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSameTargetCIHandlingFromValue(v string) (*SameTargetCIHandling, error) {
	ev := SameTargetCIHandling(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SameTargetCIHandling: valid values are %v", v, AllowedSameTargetCIHandlingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SameTargetCIHandling) IsValid() bool {
	for _, existing := range AllowedSameTargetCIHandlingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SameTargetCIHandling value
func (v SameTargetCIHandling) Ptr() *SameTargetCIHandling {
	return &v
}

type NullableSameTargetCIHandling struct {
	value *SameTargetCIHandling
	isSet bool
}

func (v NullableSameTargetCIHandling) Get() *SameTargetCIHandling {
	return v.value
}

func (v *NullableSameTargetCIHandling) Set(val *SameTargetCIHandling) {
	v.value = val
	v.isSet = true
}

func (v NullableSameTargetCIHandling) IsSet() bool {
	return v.isSet
}

func (v *NullableSameTargetCIHandling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSameTargetCIHandling(val *SameTargetCIHandling) *NullableSameTargetCIHandling {
	return &NullableSameTargetCIHandling{value: val, isSet: true}
}

func (v NullableSameTargetCIHandling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSameTargetCIHandling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

