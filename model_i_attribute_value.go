/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"encoding/json"
)

// IAttributeValue struct for IAttributeValue
type IAttributeValue struct {
	Type *AttributeValueType `json:"type,omitempty"`
	IsArray *bool `json:"isArray,omitempty"`
}

// NewIAttributeValue instantiates a new IAttributeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIAttributeValue() *IAttributeValue {
	this := IAttributeValue{}
	return &this
}

// NewIAttributeValueWithDefaults instantiates a new IAttributeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIAttributeValueWithDefaults() *IAttributeValue {
	this := IAttributeValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IAttributeValue) GetType() AttributeValueType {
	if o == nil || o.Type == nil {
		var ret AttributeValueType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAttributeValue) GetTypeOk() (*AttributeValueType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IAttributeValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AttributeValueType and assigns it to the Type field.
func (o *IAttributeValue) SetType(v AttributeValueType) {
	o.Type = &v
}

// GetIsArray returns the IsArray field value if set, zero value otherwise.
func (o *IAttributeValue) GetIsArray() bool {
	if o == nil || o.IsArray == nil {
		var ret bool
		return ret
	}
	return *o.IsArray
}

// GetIsArrayOk returns a tuple with the IsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IAttributeValue) GetIsArrayOk() (*bool, bool) {
	if o == nil || o.IsArray == nil {
		return nil, false
	}
	return o.IsArray, true
}

// HasIsArray returns a boolean if a field has been set.
func (o *IAttributeValue) HasIsArray() bool {
	if o != nil && o.IsArray != nil {
		return true
	}

	return false
}

// SetIsArray gets a reference to the given bool and assigns it to the IsArray field.
func (o *IAttributeValue) SetIsArray(v bool) {
	o.IsArray = &v
}

func (o IAttributeValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.IsArray != nil {
		toSerialize["isArray"] = o.IsArray
	}
	return json.Marshal(toSerialize)
}

type NullableIAttributeValue struct {
	value *IAttributeValue
	isSet bool
}

func (v NullableIAttributeValue) Get() *IAttributeValue {
	return v.value
}

func (v *NullableIAttributeValue) Set(val *IAttributeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableIAttributeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableIAttributeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIAttributeValue(val *IAttributeValue) *NullableIAttributeValue {
	return &NullableIAttributeValue{value: val, isSet: true}
}

func (v NullableIAttributeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIAttributeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


