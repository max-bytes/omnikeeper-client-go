/*
Landscape omnikeeper REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package okclient

import (
	"encoding/json"
)

// AnsibleInventoryScanDTO struct for AnsibleInventoryScanDTO
type AnsibleInventoryScanDTO struct {
	SetupFacts map[string]string `json:"setupFacts"`
	YumInstalled map[string]string `json:"yumInstalled"`
	YumRepos map[string]string `json:"yumRepos"`
	YumUpdates map[string]string `json:"yumUpdates"`
}

// NewAnsibleInventoryScanDTO instantiates a new AnsibleInventoryScanDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnsibleInventoryScanDTO(setupFacts map[string]string, yumInstalled map[string]string, yumRepos map[string]string, yumUpdates map[string]string) *AnsibleInventoryScanDTO {
	this := AnsibleInventoryScanDTO{}
	this.SetupFacts = setupFacts
	this.YumInstalled = yumInstalled
	this.YumRepos = yumRepos
	this.YumUpdates = yumUpdates
	return &this
}

// NewAnsibleInventoryScanDTOWithDefaults instantiates a new AnsibleInventoryScanDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnsibleInventoryScanDTOWithDefaults() *AnsibleInventoryScanDTO {
	this := AnsibleInventoryScanDTO{}
	return &this
}

// GetSetupFacts returns the SetupFacts field value
func (o *AnsibleInventoryScanDTO) GetSetupFacts() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.SetupFacts
}

// GetSetupFactsOk returns a tuple with the SetupFacts field value
// and a boolean to check if the value has been set.
func (o *AnsibleInventoryScanDTO) GetSetupFactsOk() (*map[string]string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SetupFacts, true
}

// SetSetupFacts sets field value
func (o *AnsibleInventoryScanDTO) SetSetupFacts(v map[string]string) {
	o.SetupFacts = v
}

// GetYumInstalled returns the YumInstalled field value
func (o *AnsibleInventoryScanDTO) GetYumInstalled() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.YumInstalled
}

// GetYumInstalledOk returns a tuple with the YumInstalled field value
// and a boolean to check if the value has been set.
func (o *AnsibleInventoryScanDTO) GetYumInstalledOk() (*map[string]string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.YumInstalled, true
}

// SetYumInstalled sets field value
func (o *AnsibleInventoryScanDTO) SetYumInstalled(v map[string]string) {
	o.YumInstalled = v
}

// GetYumRepos returns the YumRepos field value
func (o *AnsibleInventoryScanDTO) GetYumRepos() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.YumRepos
}

// GetYumReposOk returns a tuple with the YumRepos field value
// and a boolean to check if the value has been set.
func (o *AnsibleInventoryScanDTO) GetYumReposOk() (*map[string]string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.YumRepos, true
}

// SetYumRepos sets field value
func (o *AnsibleInventoryScanDTO) SetYumRepos(v map[string]string) {
	o.YumRepos = v
}

// GetYumUpdates returns the YumUpdates field value
func (o *AnsibleInventoryScanDTO) GetYumUpdates() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.YumUpdates
}

// GetYumUpdatesOk returns a tuple with the YumUpdates field value
// and a boolean to check if the value has been set.
func (o *AnsibleInventoryScanDTO) GetYumUpdatesOk() (*map[string]string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.YumUpdates, true
}

// SetYumUpdates sets field value
func (o *AnsibleInventoryScanDTO) SetYumUpdates(v map[string]string) {
	o.YumUpdates = v
}

func (o AnsibleInventoryScanDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["setupFacts"] = o.SetupFacts
	}
	if true {
		toSerialize["yumInstalled"] = o.YumInstalled
	}
	if true {
		toSerialize["yumRepos"] = o.YumRepos
	}
	if true {
		toSerialize["yumUpdates"] = o.YumUpdates
	}
	return json.Marshal(toSerialize)
}

type NullableAnsibleInventoryScanDTO struct {
	value *AnsibleInventoryScanDTO
	isSet bool
}

func (v NullableAnsibleInventoryScanDTO) Get() *AnsibleInventoryScanDTO {
	return v.value
}

func (v *NullableAnsibleInventoryScanDTO) Set(val *AnsibleInventoryScanDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAnsibleInventoryScanDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAnsibleInventoryScanDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnsibleInventoryScanDTO(val *AnsibleInventoryScanDTO) *NullableAnsibleInventoryScanDTO {
	return &NullableAnsibleInventoryScanDTO{value: val, isSet: true}
}

func (v NullableAnsibleInventoryScanDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnsibleInventoryScanDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


